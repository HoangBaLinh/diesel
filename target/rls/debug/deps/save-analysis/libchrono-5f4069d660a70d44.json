{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13","program":"C:\\Users\\Admin\\.rustup\\toolchains\\1.40.0-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=5f4069d660a70d44","-C","extra-filename=-5f4069d660a70d44","--out-dir","e:\\developer\\diesel\\target\\rls\\debug\\deps","-L","dependency=e:\\developer\\diesel\\target\\rls\\debug\\deps","--extern","num_integer=e:\\developer\\diesel\\target\\rls\\debug\\deps\\libnum_integer-db082b855c5cfb81.rmeta","--extern","num_traits=e:\\developer\\diesel\\target\\rls\\debug\\deps\\libnum_traits-adb946b1ce850576.rmeta","--extern","time=e:\\developer\\diesel\\target\\rls\\debug\\deps\\libtime-a9a24ee2624b804a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Admin\\.rustup/toolchains/1.40.0-x86_64-pc-windows-msvc"],"output":"e:\\developer\\diesel\\target\\rls\\debug\\deps\\libchrono-5f4069d660a70d44.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[18130127302455099497,9814501942923313973]},"crate_root":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src","external_crates":[{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7051201540145939802,10319888607268705196]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1026454463601085204,5956519655747842370]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[14346745938995860826,6106505168515399711]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13202720578349867464,1862842275659476996]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5561144063536234256,7715548798258694697]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14610271732418635879,6772691447709284036]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4406516221557685466,15675910168565901142]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15997156870004117332,17234155162274038776]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[5592790853754669538,10741615159245382754]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[8783235745414743982,17300328997249526776]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[1439570206316701055,1850678272192971880]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6136169599652282497,8536962176442599555]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[1707569757905254316,14241360972436779925]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":14,"id":{"name":"time","disambiguator":[10033085992486608700,12493317348560864018]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":15,"id":{"name":"winapi","disambiguator":[4779062692529525298,10179234353841252933]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":16,"id":{"name":"num_integer","disambiguator":[12327340454678406413,16299516376537728054]}},{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","num":17,"id":{"name":"num_traits","disambiguator":[556282273867585942,5171993858661853986]}}],"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":76,"byte_end":43380,"line_start":4,"line_end":1152,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":307},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20179,"byte_end":20187,"line_start":448,"line_end":448,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20205,"byte_end":20209,"line_start":450,"line_end":450,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20211,"byte_end":20219,"line_start":450,"line_end":450,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20221,"byte_end":20229,"line_start":450,"line_end":450,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1668},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20333,"byte_end":20341,"line_start":453,"line_end":453,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20343,"byte_end":20356,"line_start":453,"line_end":453,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1878},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20376,"byte_end":20386,"line_start":454,"line_end":454,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20388,"byte_end":20399,"line_start":454,"line_end":454,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20436,"byte_end":20443,"line_start":456,"line_end":456,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20445,"byte_end":20454,"line_start":456,"line_end":456,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20456,"byte_end":20469,"line_start":456,"line_end":456,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20471,"byte_end":20480,"line_start":456,"line_end":456,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20543,"byte_end":20548,"line_start":459,"line_end":459,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20585,"byte_end":20596,"line_start":461,"line_end":461,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20598,"byte_end":20609,"line_start":461,"line_end":461,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20611,"byte_end":20617,"line_start":461,"line_end":461,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20619,"byte_end":20627,"line_start":461,"line_end":461,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20629,"byte_end":20632,"line_start":461,"line_end":461,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20651,"byte_end":20664,"line_start":462,"line_end":462,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20666,"byte_end":20679,"line_start":462,"line_end":462,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20681,"byte_end":20692,"line_start":462,"line_end":462,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20831,"byte_end":20835,"line_start":467,"line_end":467,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20901,"byte_end":20906,"line_start":470,"line_end":470,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20942,"byte_end":20953,"line_start":472,"line_end":472,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1668},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20990,"byte_end":20998,"line_start":474,"line_end":474,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21000,"byte_end":21013,"line_start":474,"line_end":474,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21051,"byte_end":21059,"line_start":476,"line_end":476,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21061,"byte_end":21069,"line_start":476,"line_end":476,"column_start":24,"column_end":32},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21071,"byte_end":21078,"line_start":476,"line_end":476,"column_start":34,"column_end":41},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21116,"byte_end":21127,"line_start":478,"line_end":478,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21129,"byte_end":21132,"line_start":478,"line_end":478,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21170,"byte_end":21179,"line_start":480,"line_end":480,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21181,"byte_end":21194,"line_start":480,"line_end":480,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21196,"byte_end":21205,"line_start":480,"line_end":480,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21243,"byte_end":21249,"line_start":482,"line_end":482,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21251,"byte_end":21259,"line_start":482,"line_end":482,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":44}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":63152,"byte_end":63163,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":72}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":63212,"byte_end":63217,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":72}},{"kind":"Use","ref_id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":63238,"byte_end":63241,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":72}},{"kind":"Use","ref_id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21841,"byte_end":21850,"line_start":510,"line_end":510,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":260}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21852,"byte_end":21860,"line_start":510,"line_end":510,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":260}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21862,"byte_end":21870,"line_start":510,"line_end":510,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":260}},{"kind":"Use","ref_id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":22022,"byte_end":22035,"line_start":514,"line_end":514,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":260}},{"kind":"Use","ref_id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":22064,"byte_end":22071,"line_start":515,"line_end":515,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":260}},{"kind":"Use","ref_id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":22097,"byte_end":22106,"line_start":516,"line_end":516,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":260}},{"kind":"Use","ref_id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482491,"byte_end":482496,"line_start":41,"line_end":41,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1021}},{"kind":"Use","ref_id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482520,"byte_end":482526,"line_start":42,"line_end":42,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1021}},{"kind":"Use","ref_id":{"krate":0,"index":1950},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482552,"byte_end":482565,"line_start":43,"line_end":43,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1021}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":76,"byte_end":43380,"line_start":4,"line_end":1152,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":260},{"krate":0,"index":692},{"krate":0,"index":827},{"krate":0,"index":1021},{"krate":0,"index":1353},{"krate":0,"index":1996},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2025},{"krate":0,"index":2023},{"krate":0,"index":2021},{"krate":0,"index":2018},{"krate":0,"index":1387},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":2032},{"krate":0,"index":2038},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1421}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":18060,"byte_end":18082,"line_start":390,"line_end":390,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":18083,"byte_end":18122,"line_start":391,"line_end":391,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":18123,"byte_end":18142,"line_start":392,"line_end":392,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":18192,"byte_end":18216,"line_start":394,"line_end":394,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":20787,"byte_end":20794,"line_start":465,"line_end":465,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":62}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":79},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":1432},{"krate":0,"index":1463},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1454},{"krate":0,"index":1452},{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1443},{"krate":0,"index":87},{"krate":0,"index":95},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":132},{"krate":0,"index":191},{"krate":0,"index":227},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46257,"byte_end":46261,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46335,"byte_end":46341,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46507,"byte_end":46516,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46108,"byte_end":46119,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1439}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46666,"byte_end":46672,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46900,"byte_end":46908,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":47165,"byte_end":47171,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":47418,"byte_end":47421,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":47996,"byte_end":48004,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":47975,"byte_end":47984,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":48499,"byte_end":48510,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":48478,"byte_end":48487,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":49130,"byte_end":49147,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":49109,"byte_end":49118,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":49846,"byte_end":49863,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":49825,"byte_end":49834,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":50564,"byte_end":50580,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":50543,"byte_end":50552,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51068,"byte_end":51074,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51429,"byte_end":51435,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":106}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51541,"byte_end":51544,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51743,"byte_end":51751,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51974,"byte_end":51980,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":52597,"byte_end":52600,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":53416,"byte_end":53423,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":54272,"byte_end":54274,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":54825,"byte_end":54831,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":55809,"byte_end":55815,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":56506,"byte_end":56516,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":57341,"byte_end":57350,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":57833,"byte_end":57846,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":58586,"byte_end":58602,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":59333,"byte_end":59353,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":60055,"byte_end":60070,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn (&self, nanos: i64) -> DateTime<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":60857,"byte_end":60874,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":61145,"byte_end":61156,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":61268,"byte_end":61290,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":61430,"byte_end":61456,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":61606,"byte_end":61621,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":61973,"byte_end":61992,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":62266,"byte_end":62286,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":62412,"byte_end":62436,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":62643,"byte_end":62656,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":62929,"byte_end":62946,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":66274,"byte_end":66285,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1467}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":66889,"byte_end":66893,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":67228,"byte_end":67236,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":67978,"byte_end":67982,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68317,"byte_end":68325,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68624,"byte_end":68639,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68603,"byte_end":68612,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68801,"byte_end":68816,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68780,"byte_end":68789,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":75884,"byte_end":75889,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":75980,"byte_end":75985,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":76211,"byte_end":76214,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"cfg(not\n      (all\n       (target_arch = \"wasm32\", not (target_os = \"wasi\"), feature =\n        \"wasmbind\")))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":76112,"byte_end":76199,"line_start":94,"line_end":94,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":81519,"byte_end":81522,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":81637,"byte_end":81642,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn () -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":81864,"byte_end":81867,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn () -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"cfg(not\n      (all\n       (target_arch = \"wasm32\", not (target_os = \"wasi\"), feature =\n        \"wasmbind\")))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":81765,"byte_end":81852,"line_start":46,"line_end":46,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21472,"byte_end":21477,"line_start":497,"line_end":497,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":387},{"krate":0,"index":507},{"krate":0,"index":587},{"krate":0,"index":600},{"krate":0,"index":685},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":87539,"byte_end":87548,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1500}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":87667,"byte_end":87675,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":87825,"byte_end":87833,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":90197,"byte_end":90205,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":91056,"byte_end":91068,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":91962,"byte_end":91969,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":92839,"byte_end":92850,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":93856,"byte_end":93867,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":96230,"byte_end":96245,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":99188,"byte_end":99209,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":99167,"byte_end":99176,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":100158,"byte_end":100183,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":101893,"byte_end":101914,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":102789,"byte_end":102814,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":104834,"byte_end":104848,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":105497,"byte_end":105505,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":105476,"byte_end":105485,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":106321,"byte_end":106328,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":106300,"byte_end":106309,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":107214,"byte_end":107225,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":107193,"byte_end":107202,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":108164,"byte_end":108177,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":108143,"byte_end":108152,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":109250,"byte_end":109267,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":109229,"byte_end":109238,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":110286,"byte_end":110299,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":110265,"byte_end":110274,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":111400,"byte_end":111417,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":111379,"byte_end":111388,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":112440,"byte_end":112452,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":112419,"byte_end":112428,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":113569,"byte_end":113585,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":113548,"byte_end":113557,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":115277,"byte_end":115281,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":115256,"byte_end":115265,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":115823,"byte_end":115831,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":115802,"byte_end":115811,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":116508,"byte_end":116512,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":116487,"byte_end":116496,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":117059,"byte_end":117067,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":117038,"byte_end":117047,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":118114,"byte_end":118132,"line_start":892,"line_end":892,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":119738,"byte_end":119756,"line_start":927,"line_end":927,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":121655,"byte_end":121676,"line_start":965,"line_end":965,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":123436,"byte_end":123453,"line_start":1006,"line_end":1006,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":123357,"byte_end":123410,"line_start":1004,"line_end":1004,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":123415,"byte_end":123424,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":125141,"byte_end":125147,"line_start":1048,"line_end":1048,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":125062,"byte_end":125115,"line_start":1046,"line_end":1046,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":125120,"byte_end":125129,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":174182,"byte_end":174195,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1524}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":174857,"byte_end":174860,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":174836,"byte_end":174845,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":176143,"byte_end":176157,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":176122,"byte_end":176131,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":177499,"byte_end":177517,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":177478,"byte_end":177487,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":180902,"byte_end":180916,"line_start":213,"line_end":213,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":181438,"byte_end":181442,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":181417,"byte_end":181426,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":181795,"byte_end":181799,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":181774,"byte_end":181783,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":182706,"byte_end":182715,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":182685,"byte_end":182694,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":184093,"byte_end":184109,"line_start":304,"line_end":304,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":184072,"byte_end":184081,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":185577,"byte_end":185592,"line_start":343,"line_end":343,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":185556,"byte_end":185565,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":186370,"byte_end":186393,"line_start":365,"line_end":365,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":186349,"byte_end":186358,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":187126,"byte_end":187149,"line_start":386,"line_end":386,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":187105,"byte_end":187114,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":187891,"byte_end":187913,"line_start":407,"line_end":407,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":187870,"byte_end":187879,"line_start":406,"line_end":406,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":191292,"byte_end":191310,"line_start":485,"line_end":485,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":194854,"byte_end":194872,"line_start":567,"line_end":567,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":197281,"byte_end":197302,"line_start":623,"line_end":623,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":198744,"byte_end":198761,"line_start":656,"line_end":656,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":198665,"byte_end":198718,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":198723,"byte_end":198732,"line_start":655,"line_end":655,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":200562,"byte_end":200568,"line_start":698,"line_end":698,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":200483,"byte_end":200536,"line_start":696,"line_end":696,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":200541,"byte_end":200550,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":299422,"byte_end":299429,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1593}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":301387,"byte_end":301391,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":301366,"byte_end":301375,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":301841,"byte_end":301845,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":301820,"byte_end":301829,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":302313,"byte_end":302318,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":302292,"byte_end":302301,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":312082,"byte_end":312091,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":312749,"byte_end":312757,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":312728,"byte_end":312737,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":313614,"byte_end":313626,"line_start":229,"line_end":229,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":313593,"byte_end":313602,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":314367,"byte_end":314381,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":314346,"byte_end":314355,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":315441,"byte_end":315459,"line_start":279,"line_end":279,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":315420,"byte_end":315429,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":316295,"byte_end":316309,"line_start":304,"line_end":304,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":316274,"byte_end":316283,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":317385,"byte_end":317403,"line_start":331,"line_end":331,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":317364,"byte_end":317373,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":318213,"byte_end":318226,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":318192,"byte_end":318201,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":319311,"byte_end":319328,"line_start":381,"line_end":381,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":319290,"byte_end":319299,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":320272,"byte_end":320302,"line_start":408,"line_end":408,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":320251,"byte_end":320260,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":321274,"byte_end":321308,"line_start":433,"line_end":433,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":321253,"byte_end":321262,"line_start":432,"line_end":432,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":323978,"byte_end":323992,"line_start":501,"line_end":501,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":325155,"byte_end":325177,"line_start":530,"line_end":530,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":328686,"byte_end":328708,"line_start":616,"line_end":616,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":328665,"byte_end":328674,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":331762,"byte_end":331783,"line_start":681,"line_end":681,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":334439,"byte_end":334456,"line_start":748,"line_end":748,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":334360,"byte_end":334413,"line_start":746,"line_end":746,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":334418,"byte_end":334427,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":336277,"byte_end":336283,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":336198,"byte_end":336251,"line_start":790,"line_end":790,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":336256,"byte_end":336265,"line_start":791,"line_end":791,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1637},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":377429,"byte_end":377433,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":377541,"byte_end":377549,"line_start":51,"line_end":51,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":377651,"byte_end":377659,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":378007,"byte_end":378015,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":377986,"byte_end":377995,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":378316,"byte_end":378324,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":378295,"byte_end":378304,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":378721,"byte_end":378728,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":378700,"byte_end":378709,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":379083,"byte_end":379094,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":379062,"byte_end":379071,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":379581,"byte_end":379594,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":379560,"byte_end":379569,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":380085,"byte_end":380102,"line_start":109,"line_end":109,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":380064,"byte_end":380073,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":380665,"byte_end":380678,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":380644,"byte_end":380653,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":381173,"byte_end":381190,"line_start":135,"line_end":135,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":381152,"byte_end":381161,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":381754,"byte_end":381766,"line_start":151,"line_end":151,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":381733,"byte_end":381742,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":382259,"byte_end":382275,"line_start":161,"line_end":161,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":382238,"byte_end":382247,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":382639,"byte_end":382643,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":382618,"byte_end":382627,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":382865,"byte_end":382873,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":382844,"byte_end":382853,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383133,"byte_end":383137,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383112,"byte_end":383121,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383361,"byte_end":383369,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383340,"byte_end":383349,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383563,"byte_end":383569,"line_start":205,"line_end":205,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383542,"byte_end":383551,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383690,"byte_end":383698,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383669,"byte_end":383678,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383924,"byte_end":383937,"line_start":218,"line_end":218,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":383903,"byte_end":383912,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":384169,"byte_end":384187,"line_start":226,"line_end":226,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":384148,"byte_end":384157,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":384507,"byte_end":384525,"line_start":235,"line_end":235,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":384486,"byte_end":384495,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":384953,"byte_end":384974,"line_start":246,"line_end":246,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":384932,"byte_end":384941,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385157,"byte_end":385166,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385136,"byte_end":385145,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385476,"byte_end":385487,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385455,"byte_end":385464,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386034,"byte_end":386051,"line_start":282,"line_end":282,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385955,"byte_end":386008,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386013,"byte_end":386022,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386541,"byte_end":386547,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386462,"byte_end":386515,"line_start":293,"line_end":293,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386520,"byte_end":386529,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1645},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":391604,"byte_end":391608,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1644},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1647},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":391747,"byte_end":391753,"line_start":42,"line_end":42,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1644},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1649},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":391892,"byte_end":391898,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1644},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":392037,"byte_end":392042,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1644},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1653},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":392278,"byte_end":392284,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1644},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":392344,"byte_end":392359,"line_start":59,"line_end":59,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1644},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":391511,"byte_end":391524,"line_start":36,"line_end":36,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1655}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1668},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":392657,"byte_end":392665,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393305,"byte_end":393313,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393284,"byte_end":393293,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393501,"byte_end":393505,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393480,"byte_end":393489,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393730,"byte_end":393734,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393709,"byte_end":393718,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393951,"byte_end":393960,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":393930,"byte_end":393939,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":394781,"byte_end":394797,"line_start":132,"line_end":132,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":394760,"byte_end":394769,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":395619,"byte_end":395634,"line_start":156,"line_end":156,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":395598,"byte_end":395607,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":395964,"byte_end":395987,"line_start":166,"line_end":166,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":395943,"byte_end":395952,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396329,"byte_end":396352,"line_start":176,"line_end":176,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396308,"byte_end":396317,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396696,"byte_end":396718,"line_start":186,"line_end":186,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396675,"byte_end":396684,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396863,"byte_end":396869,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396842,"byte_end":396851,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396990,"byte_end":396998,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":396969,"byte_end":396978,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":397228,"byte_end":397241,"line_start":205,"line_end":205,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":397207,"byte_end":397216,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":397494,"byte_end":397512,"line_start":213,"line_end":213,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":397473,"byte_end":397482,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":397878,"byte_end":397896,"line_start":223,"line_end":223,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":397857,"byte_end":397866,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398252,"byte_end":398273,"line_start":232,"line_end":232,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398231,"byte_end":398240,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398472,"byte_end":398481,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398451,"byte_end":398460,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398614,"byte_end":398625,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398593,"byte_end":398602,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":402432,"byte_end":402450,"line_start":340,"line_end":340,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":403075,"byte_end":403093,"line_start":352,"line_end":352,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":404301,"byte_end":404315,"line_start":379,"line_end":379,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":404741,"byte_end":404751,"line_start":392,"line_end":392,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":404676,"byte_end":404729,"line_start":391,"line_end":391,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":405083,"byte_end":405093,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":405018,"byte_end":405071,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":406556,"byte_end":406571,"line_start":429,"line_end":429,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":406491,"byte_end":406544,"line_start":428,"line_end":428,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408181,"byte_end":408198,"line_start":474,"line_end":474,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408102,"byte_end":408155,"line_start":472,"line_end":472,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408160,"byte_end":408169,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408754,"byte_end":408760,"line_start":488,"line_end":488,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408675,"byte_end":408728,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408733,"byte_end":408742,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1675},{"krate":0,"index":1682},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1684},{"krate":0,"index":1701},{"krate":0,"index":1699},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1691},{"krate":0,"index":1702},{"krate":0,"index":1755},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1746},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1757},{"krate":0,"index":1804},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1795},{"krate":0,"index":1806},{"krate":0,"index":1817},{"krate":0,"index":1815},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1819},{"krate":0,"index":1836},{"krate":0,"index":1834},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1838},{"krate":0,"index":1875},{"krate":0,"index":1869},{"krate":0,"index":1871},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1861},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1878},{"krate":0,"index":1891},{"krate":0,"index":1889},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1881},{"krate":0,"index":1893},{"krate":0,"index":1917},{"krate":0,"index":1915},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1908},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1075},{"krate":0,"index":1128},{"krate":0,"index":1132},{"krate":0,"index":1201},{"krate":0,"index":1270},{"krate":0,"index":1314},{"krate":0,"index":1969},{"krate":0,"index":1975},{"krate":0,"index":1338},{"krate":0,"index":1345},{"krate":0,"index":1350}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":481752,"byte_end":481796,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1685},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482818,"byte_end":482822,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1687},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482856,"byte_end":482860,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1689},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482889,"byte_end":482894,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":482788,"byte_end":482791,"line_start":51,"line_end":51,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1689}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1703},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":483790,"byte_end":483794,"line_start":77,"line_end":77,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1705},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":483896,"byte_end":483906,"line_start":79,"line_end":79,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1707},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":483977,"byte_end":483987,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1709},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484122,"byte_end":484129,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484227,"byte_end":484240,"line_start":86,"line_end":86,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1713},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484323,"byte_end":484336,"line_start":88,"line_end":88,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1715},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484367,"byte_end":484372,"line_start":90,"line_end":90,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1717},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484414,"byte_end":484417,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1719},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484510,"byte_end":484521,"line_start":94,"line_end":94,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1721},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484614,"byte_end":484625,"line_start":96,"line_end":96,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1723},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484683,"byte_end":484690,"line_start":98,"line_end":98,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1725},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484766,"byte_end":484780,"line_start":100,"line_end":100,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1727},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484854,"byte_end":484868,"line_start":102,"line_end":102,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1729},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484909,"byte_end":484916,"line_start":104,"line_end":104,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":484975,"byte_end":484979,"line_start":106,"line_end":106,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1733},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485038,"byte_end":485044,"line_start":108,"line_end":108,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1735},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485117,"byte_end":485123,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1737},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485198,"byte_end":485204,"line_start":112,"line_end":112,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1739},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485407,"byte_end":485417,"line_start":116,"line_end":116,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1741},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485597,"byte_end":485606,"line_start":119,"line_end":119,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1743},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485825,"byte_end":485833,"line_start":125,"line_end":125,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1702},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":483653,"byte_end":483660,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1715},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1739},{"krate":0,"index":1741},{"krate":0,"index":1743}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485941,"byte_end":485956,"line_start":129,"line_end":129,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1045}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486754,"byte_end":486768,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1760},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486901,"byte_end":486914,"line_start":166,"line_end":166,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1762},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487063,"byte_end":487079,"line_start":170,"line_end":170,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1764},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487222,"byte_end":487237,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487315,"byte_end":487324,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1768},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487402,"byte_end":487411,"line_start":182,"line_end":182,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487658,"byte_end":487668,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487758,"byte_end":487769,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487859,"byte_end":487870,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":487960,"byte_end":487971,"line_start":192,"line_end":192,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":488092,"byte_end":488104,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":488439,"byte_end":488458,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":488850,"byte_end":488870,"line_start":209,"line_end":209,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":489009,"byte_end":489023,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":489164,"byte_end":489179,"line_start":215,"line_end":215,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":489272,"byte_end":489279,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":489335,"byte_end":489342,"line_start":219,"line_end":219,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1792},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":489561,"byte_end":489569,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1757},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1757},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486609,"byte_end":486614,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":489719,"byte_end":489732,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1807}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1840},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":490748,"byte_end":490755,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1843},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":490893,"byte_end":490905,"line_start":260,"line_end":260,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":490835,"byte_end":490888,"line_start":259,"line_end":259,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1846},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":490993,"byte_end":490998,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1849},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":491134,"byte_end":491144,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":491076,"byte_end":491129,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1852},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":491323,"byte_end":491330,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":491377,"byte_end":491382,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1859},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":491471,"byte_end":491476,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":490688,"byte_end":490692,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1852},{"krate":0,"index":1856},{"krate":0,"index":1859}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1878},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":492224,"byte_end":492234,"line_start":313,"line_end":313,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":493502,"byte_end":493513,"line_start":348,"line_end":348,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1073},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":495083,"byte_end":495094,"line_start":383,"line_end":383,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"fn <'a> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, item: &Item<'a>) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":495022,"byte_end":495075,"line_start":382,"line_end":382,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":507383,"byte_end":507389,"line_start":655,"line_end":655,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I, B> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":507322,"byte_end":507375,"line_start":654,"line_end":654,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":511658,"byte_end":511664,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":511573,"byte_end":511611,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1920},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":511841,"byte_end":511845,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":512149,"byte_end":512161,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":512254,"byte_end":512266,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":512533,"byte_end":512540,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1924},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":512927,"byte_end":512942,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513109,"byte_end":513124,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513171,"byte_end":513176,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513331,"byte_end":513344,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513499,"byte_end":513512,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513652,"byte_end":513659,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513708,"byte_end":513715,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513809,"byte_end":513816,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":513920,"byte_end":513923,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514024,"byte_end":514035,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514098,"byte_end":514109,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1935},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514164,"byte_end":514170,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514254,"byte_end":514260,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514359,"byte_end":514369,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514572,"byte_end":514581,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1939},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":514660,"byte_end":514666,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1919},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":515995,"byte_end":515998,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":516148,"byte_end":516156,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":516127,"byte_end":516136,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":516405,"byte_end":516421,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":516384,"byte_end":516393,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":516749,"byte_end":516765,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":516728,"byte_end":516737,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":517083,"byte_end":517094,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":517062,"byte_end":517071,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":517352,"byte_end":517371,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":517331,"byte_end":517340,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":517708,"byte_end":517727,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":517687,"byte_end":517696,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518044,"byte_end":518053,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518023,"byte_end":518032,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518305,"byte_end":518322,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518284,"byte_end":518293,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518582,"byte_end":518599,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518561,"byte_end":518570,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518847,"byte_end":518858,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":518826,"byte_end":518835,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519100,"byte_end":519111,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519079,"byte_end":519088,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519327,"byte_end":519338,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519306,"byte_end":519315,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519572,"byte_end":519579,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519551,"byte_end":519560,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519865,"byte_end":519873,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":519844,"byte_end":519853,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":520150,"byte_end":520160,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":520129,"byte_end":520138,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":520537,"byte_end":520545,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":520516,"byte_end":520525,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":520889,"byte_end":520899,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":520868,"byte_end":520877,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521138,"byte_end":521148,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521117,"byte_end":521126,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521395,"byte_end":521409,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521374,"byte_end":521383,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521658,"byte_end":521671,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521637,"byte_end":521646,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521883,"byte_end":521893,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":521862,"byte_end":521871,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":522537,"byte_end":522550,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":531869,"byte_end":531882,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":533665,"byte_end":533694,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":537112,"byte_end":537127,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":537599,"byte_end":537610,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":538638,"byte_end":538663,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parse.rs","byte_start":575805,"byte_end":575810,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I, B> (parsed: &mut Parsed, s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1314},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1950},{"krate":0,"index":1957},{"krate":0,"index":1954},{"krate":0,"index":1322},{"krate":0,"index":1327},{"krate":0,"index":1328}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1950},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":630746,"byte_end":630759,"line_start":166,"line_end":166,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1952},{"krate":0,"index":1953}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":631235,"byte_end":631238,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1969},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":508155,"byte_end":508168,"line_start":685,"line_end":685,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":508073,"byte_end":508126,"line_start":683,"line_end":683,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":508694,"byte_end":508697,"line_start":699,"line_end":699,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":508957,"byte_end":508972,"line_start":704,"line_end":704,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":646790,"byte_end":646801,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":647331,"byte_end":647344,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":647847,"byte_end":647860,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":649599,"byte_end":649612,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1374},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":649725,"byte_end":649728,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", test))","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":649681,"byte_end":649715,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":650431,"byte_end":650445,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"fn (self, duration: Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":651043,"byte_end":651057,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"fn (self, duration: Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":653884,"byte_end":653908,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":654335,"byte_end":654355,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":654720,"byte_end":654741,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":653449,"byte_end":653462,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"RoundingError::{DurationExceedsTimestamp, DurationExceedsLimit, TimestampExceedsLimit}","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1983}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25022,"byte_end":25025,"line_start":604,"line_end":604,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25052,"byte_end":25055,"line_start":606,"line_end":606,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2003},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25084,"byte_end":25087,"line_start":608,"line_end":608,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25115,"byte_end":25118,"line_start":610,"line_end":610,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2009},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25144,"byte_end":25147,"line_start":612,"line_end":612,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25175,"byte_end":25178,"line_start":614,"line_end":614,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2015},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25204,"byte_end":25207,"line_start":616,"line_end":616,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1996},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":24992,"byte_end":24999,"line_start":602,"line_end":602,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2003},{"krate":0,"index":2006},{"krate":0,"index":2009},{"krate":0,"index":2012},{"krate":0,"index":2015}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25526,"byte_end":25530,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25505,"byte_end":25514,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":26183,"byte_end":26187,"line_start":644,"line_end":644,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":26162,"byte_end":26171,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":26929,"byte_end":26947,"line_start":662,"line_end":662,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":26908,"byte_end":26917,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":27582,"byte_end":27600,"line_start":680,"line_end":680,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":27561,"byte_end":27570,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":28241,"byte_end":28261,"line_start":698,"line_end":698,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":28220,"byte_end":28229,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":28902,"byte_end":28922,"line_start":716,"line_end":716,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":28881,"byte_end":28890,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2032},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":30761,"byte_end":30778,"line_start":780,"line_end":780,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2033}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":33834,"byte_end":33842,"line_start":896,"line_end":896,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":33960,"byte_end":33964,"line_start":898,"line_end":898,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":34173,"byte_end":34180,"line_start":903,"line_end":903,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":34156,"byte_end":34165,"line_start":902,"line_end":902,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":34475,"byte_end":34480,"line_start":915,"line_end":915,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":34608,"byte_end":34614,"line_start":920,"line_end":920,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":34785,"byte_end":34788,"line_start":925,"line_end":925,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":34959,"byte_end":34963,"line_start":930,"line_end":930,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":35132,"byte_end":35139,"line_start":935,"line_end":935,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":35308,"byte_end":35316,"line_start":940,"line_end":940,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":35373,"byte_end":35380,"line_start":943,"line_end":943,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":35438,"byte_end":35446,"line_start":946,"line_end":946,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":35604,"byte_end":35613,"line_start":951,"line_end":951,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":35806,"byte_end":35816,"line_start":956,"line_end":956,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":36010,"byte_end":36021,"line_start":961,"line_end":961,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":36216,"byte_end":36224,"line_start":966,"line_end":966,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":36416,"byte_end":36425,"line_start":971,"line_end":971,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":36617,"byte_end":36629,"line_start":976,"line_end":976,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":36824,"byte_end":36837,"line_start":981,"line_end":981,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":37396,"byte_end":37412,"line_start":995,"line_end":995,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38070,"byte_end":38078,"line_start":1014,"line_end":1014,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38141,"byte_end":38145,"line_start":1016,"line_end":1016,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38296,"byte_end":38302,"line_start":1021,"line_end":1021,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38279,"byte_end":38288,"line_start":1020,"line_end":1020,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38546,"byte_end":38552,"line_start":1031,"line_end":1031,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38624,"byte_end":38630,"line_start":1034,"line_end":1034,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38873,"byte_end":38883,"line_start":1039,"line_end":1039,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":39037,"byte_end":39046,"line_start":1044,"line_end":1044,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":39222,"byte_end":39233,"line_start":1049,"line_end":1049,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":39520,"byte_end":39531,"line_start":1056,"line_end":1056,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":39864,"byte_end":39879,"line_start":1063,"line_end":1063,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":40008,"byte_end":40033,"line_start":1067,"line_end":1067,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":39991,"byte_end":40000,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46551,"byte_end":46562,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":47743,"byte_end":47754,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":50964,"byte_end":50975,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":66322,"byte_end":66333,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68890,"byte_end":68901,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":69489,"byte_end":69500,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":69581,"byte_end":69592,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":70090,"byte_end":70101,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":70869,"byte_end":70878,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71066,"byte_end":71075,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71264,"byte_end":71277,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71473,"byte_end":71486,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71697,"byte_end":71705,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71917,"byte_end":71925,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":75897,"byte_end":75902,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":76793,"byte_end":76798,"line_start":111,"line_end":111,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":81556,"byte_end":81559,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":82348,"byte_end":82351,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":82871,"byte_end":82874,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":82970,"byte_end":82973,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":83089,"byte_end":83092,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":88887,"byte_end":88896,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":125294,"byte_end":125303,"line_start":1053,"line_end":1053,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":137635,"byte_end":137644,"line_start":1420,"line_end":1420,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":137863,"byte_end":137872,"line_start":1429,"line_end":1429,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":139287,"byte_end":139296,"line_start":1462,"line_end":1462,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":139515,"byte_end":139524,"line_start":1471,"line_end":1471,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":140780,"byte_end":140789,"line_start":1505,"line_end":1505,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":141782,"byte_end":141791,"line_start":1536,"line_end":1536,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":143050,"byte_end":143059,"line_start":1571,"line_end":1571,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":143661,"byte_end":143670,"line_start":1593,"line_end":1593,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":174248,"byte_end":174261,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":200715,"byte_end":200728,"line_start":703,"line_end":703,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":211784,"byte_end":211797,"line_start":1021,"line_end":1021,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":217993,"byte_end":218006,"line_start":1193,"line_end":1193,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":220621,"byte_end":220634,"line_start":1255,"line_end":1255,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":220865,"byte_end":220878,"line_start":1264,"line_end":1264,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":223389,"byte_end":223402,"line_start":1325,"line_end":1325,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":223633,"byte_end":223646,"line_start":1334,"line_end":1334,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":225584,"byte_end":225597,"line_start":1387,"line_end":1387,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":226805,"byte_end":226818,"line_start":1423,"line_end":1423,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":227914,"byte_end":227927,"line_start":1454,"line_end":1454,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":228665,"byte_end":228678,"line_start":1476,"line_end":1476,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":272885,"byte_end":272894,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":273691,"byte_end":273700,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":281841,"byte_end":281843,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":283922,"byte_end":283924,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":284523,"byte_end":284526,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":286489,"byte_end":286492,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":300715,"byte_end":300722,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":303268,"byte_end":303275,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":312132,"byte_end":312141,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":648},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":336673,"byte_end":336682,"line_start":804,"line_end":804,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":343911,"byte_end":343920,"line_start":1017,"line_end":1017,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":346927,"byte_end":346936,"line_start":1082,"line_end":1082,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":347117,"byte_end":347126,"line_start":1091,"line_end":1091,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":349729,"byte_end":349738,"line_start":1152,"line_end":1152,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":349919,"byte_end":349928,"line_start":1161,"line_end":1161,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":352463,"byte_end":352472,"line_start":1219,"line_end":1219,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":353860,"byte_end":353869,"line_start":1256,"line_end":1256,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":355722,"byte_end":355731,"line_start":1306,"line_end":1306,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":356503,"byte_end":356512,"line_start":1331,"line_end":1331,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":377738,"byte_end":377742,"line_start":55,"line_end":55,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385842,"byte_end":385846,"line_start":275,"line_end":275,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386708,"byte_end":386712,"line_start":300,"line_end":300,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388547,"byte_end":388551,"line_start":375,"line_end":375,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388631,"byte_end":388635,"line_start":376,"line_end":376,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388740,"byte_end":388744,"line_start":378,"line_end":378,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388864,"byte_end":388868,"line_start":384,"line_end":384,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388911,"byte_end":388915,"line_start":386,"line_end":386,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389067,"byte_end":389071,"line_start":392,"line_end":392,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389206,"byte_end":389210,"line_start":398,"line_end":398,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389349,"byte_end":389353,"line_start":404,"line_end":404,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389577,"byte_end":389581,"line_start":413,"line_end":413,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389802,"byte_end":389806,"line_start":422,"line_end":422,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389991,"byte_end":389995,"line_start":431,"line_end":431,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":390169,"byte_end":390173,"line_start":437,"line_end":437,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":392757,"byte_end":392765,"line_start":73,"line_end":73,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398812,"byte_end":398820,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":399326,"byte_end":399334,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":399744,"byte_end":399752,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":400204,"byte_end":400212,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":400660,"byte_end":400668,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":401106,"byte_end":401114,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":401830,"byte_end":401838,"line_start":326,"line_end":326,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":404530,"byte_end":404538,"line_start":386,"line_end":386,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":921},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408921,"byte_end":408929,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":410786,"byte_end":410794,"line_start":567,"line_end":567,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":411834,"byte_end":411842,"line_start":607,"line_end":607,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":411922,"byte_end":411930,"line_start":608,"line_end":608,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":412039,"byte_end":412047,"line_start":610,"line_end":610,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":412179,"byte_end":412187,"line_start":616,"line_end":616,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":412260,"byte_end":412268,"line_start":618,"line_end":618,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413007,"byte_end":413015,"line_start":639,"line_end":639,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413162,"byte_end":413170,"line_start":645,"line_end":645,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413313,"byte_end":413321,"line_start":651,"line_end":651,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413557,"byte_end":413565,"line_start":660,"line_end":660,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413802,"byte_end":413810,"line_start":669,"line_end":669,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413999,"byte_end":414007,"line_start":678,"line_end":678,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414181,"byte_end":414189,"line_start":684,"line_end":684,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414382,"byte_end":414390,"line_start":693,"line_end":693,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414616,"byte_end":414624,"line_start":702,"line_end":702,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414869,"byte_end":414877,"line_start":711,"line_end":711,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":415529,"byte_end":415537,"line_start":731,"line_end":731,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":415736,"byte_end":415746,"line_start":738,"line_end":738,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485995,"byte_end":486010,"line_start":133,"line_end":133,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486100,"byte_end":486115,"line_start":139,"line_end":139,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486221,"byte_end":486236,"line_start":145,"line_end":145,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486261,"byte_end":486276,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":493565,"byte_end":493575,"line_start":350,"line_end":350,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":494324,"byte_end":494334,"line_start":365,"line_end":365,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":515242,"byte_end":515248,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":515924,"byte_end":515930,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parse.rs","byte_start":584773,"byte_end":584781,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":631125,"byte_end":631138,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":631457,"byte_end":631470,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":508594,"byte_end":508607,"line_start":697,"line_end":697,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":509457,"byte_end":509470,"line_start":719,"line_end":719,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":510359,"byte_end":510366,"line_start":751,"line_end":751,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1352}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":647916,"byte_end":647917,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":651298,"byte_end":651306,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":654768,"byte_end":654781,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":655360,"byte_end":655373,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25221,"byte_end":25228,"line_start":619,"line_end":619,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":29219,"byte_end":29226,"line_start":729,"line_end":729,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":29874,"byte_end":29881,"line_start":746,"line_end":746,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":30820,"byte_end":30837,"line_start":784,"line_end":784,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":21456,"byte_end":21462,"line_start":496,"line_end":496,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":72}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":22748,"byte_end":22754,"line_start":537,"line_end":537,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1021}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":507898,"byte_end":507906,"line_start":679,"line_end":679,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1314}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":46551,"byte_end":46562,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":47743,"byte_end":47754,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":50964,"byte_end":50975,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51437,"byte_end":51442,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":105}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51445,"byte_end":51450,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2185},"to":{"krate":0,"index":105}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51458,"byte_end":51463,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":7580},"to":{"krate":0,"index":105}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51753,"byte_end":51758,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":107}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\mod.rs","byte_start":51761,"byte_end":51766,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2185},"to":{"krate":0,"index":107}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":66322,"byte_end":66333,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":68890,"byte_end":68901,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1466},"to":{"krate":0,"index":107}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":69489,"byte_end":69500,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1466},"to":{"krate":0,"index":105}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":69581,"byte_end":69592,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":70090,"byte_end":70101,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":70869,"byte_end":70878,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71066,"byte_end":71075,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71264,"byte_end":71277,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71473,"byte_end":71486,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71697,"byte_end":71705,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\fixed.rs","byte_start":71917,"byte_end":71925,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":75897,"byte_end":75902,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\local.rs","byte_start":76793,"byte_end":76798,"line_start":111,"line_end":111,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1481},"to":{"krate":0,"index":107}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":81556,"byte_end":81559,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":82348,"byte_end":82351,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1488},"to":{"krate":0,"index":107}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":82871,"byte_end":82874,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1488},"to":{"krate":0,"index":105}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":82970,"byte_end":82973,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1488},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\offset\\utc.rs","byte_start":83089,"byte_end":83092,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1488},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":88887,"byte_end":88896,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":125294,"byte_end":125303,"line_start":1053,"line_end":1053,"column_start":19,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1499},"to":{"krate":0,"index":1402}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":137635,"byte_end":137644,"line_start":1420,"line_end":1420,"column_start":27,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":137863,"byte_end":137872,"line_start":1429,"line_end":1429,"column_start":33,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":1634}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":139287,"byte_end":139296,"line_start":1462,"line_end":1462,"column_start":27,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":139515,"byte_end":139524,"line_start":1471,"line_end":1471,"column_start":33,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":1638}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":140780,"byte_end":140789,"line_start":1505,"line_end":1505,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":141782,"byte_end":141791,"line_start":1536,"line_end":1536,"column_start":21,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":143050,"byte_end":143059,"line_start":1571,"line_end":1571,"column_start":23,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\date.rs","byte_start":143661,"byte_end":143670,"line_start":1593,"line_end":1593,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1499},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":174248,"byte_end":174261,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":200715,"byte_end":200728,"line_start":703,"line_end":703,"column_start":19,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1522},"to":{"krate":0,"index":1402}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":211784,"byte_end":211797,"line_start":1021,"line_end":1021,"column_start":19,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1522},"to":{"krate":0,"index":1421}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":217993,"byte_end":218006,"line_start":1193,"line_end":1193,"column_start":21,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":7222}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":220621,"byte_end":220634,"line_start":1255,"line_end":1255,"column_start":27,"column_end":40},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":220865,"byte_end":220878,"line_start":1264,"line_end":1264,"column_start":33,"column_end":46},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1634}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":223389,"byte_end":223402,"line_start":1325,"line_end":1325,"column_start":27,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":223633,"byte_end":223646,"line_start":1334,"line_end":1334,"column_start":33,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1638}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":225584,"byte_end":225597,"line_start":1387,"line_end":1387,"column_start":29,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":226805,"byte_end":226818,"line_start":1423,"line_end":1423,"column_start":21,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":227914,"byte_end":227927,"line_start":1454,"line_end":1454,"column_start":23,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\datetime.rs","byte_start":228665,"byte_end":228678,"line_start":1476,"line_end":1476,"column_start":23,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":272885,"byte_end":272894,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":273691,"byte_end":273700,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1547},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":281841,"byte_end":281843,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":283922,"byte_end":283924,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1560},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":284523,"byte_end":284526,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\internals.rs","byte_start":286489,"byte_end":286492,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":300715,"byte_end":300722,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\isoweek.rs","byte_start":303268,"byte_end":303275,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":312132,"byte_end":312141,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":336673,"byte_end":336682,"line_start":804,"line_end":804,"column_start":19,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1612},"to":{"krate":0,"index":1421}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":343911,"byte_end":343920,"line_start":1017,"line_end":1017,"column_start":21,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":7222}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":346927,"byte_end":346936,"line_start":1082,"line_end":1082,"column_start":27,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":347117,"byte_end":347126,"line_start":1091,"line_end":1091,"column_start":33,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1634}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":349729,"byte_end":349738,"line_start":1152,"line_end":1152,"column_start":27,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":349919,"byte_end":349928,"line_start":1161,"line_end":1161,"column_start":33,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1638}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":352463,"byte_end":352472,"line_start":1219,"line_end":1219,"column_start":25,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":353860,"byte_end":353869,"line_start":1256,"line_end":1256,"column_start":21,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":355722,"byte_end":355731,"line_start":1306,"line_end":1306,"column_start":23,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\naive\\time.rs","byte_start":356503,"byte_end":356512,"line_start":1331,"line_end":1331,"column_start":23,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":377738,"byte_end":377742,"line_start":55,"line_end":55,"column_start":20,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":385842,"byte_end":385846,"line_start":275,"line_end":275,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":386708,"byte_end":386712,"line_start":300,"line_end":300,"column_start":33,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1637},"to":{"krate":0,"index":1402}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388547,"byte_end":388551,"line_start":375,"line_end":375,"column_start":29,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":1548}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388631,"byte_end":388635,"line_start":376,"line_end":376,"column_start":36,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":1538}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388740,"byte_end":388744,"line_start":378,"line_end":378,"column_start":60,"column_end":64},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388864,"byte_end":388868,"line_start":384,"line_end":384,"column_start":27,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":2050}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":388911,"byte_end":388915,"line_start":386,"line_end":386,"column_start":35,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":2082}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389067,"byte_end":389071,"line_start":392,"line_end":392,"column_start":28,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":2071}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389206,"byte_end":389210,"line_start":398,"line_end":398,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":7222}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389349,"byte_end":389353,"line_start":404,"line_end":404,"column_start":41,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389577,"byte_end":389581,"line_start":413,"line_end":413,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389802,"byte_end":389806,"line_start":422,"line_end":422,"column_start":38,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":389991,"byte_end":389995,"line_start":431,"line_end":431,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\date.rs","byte_start":390169,"byte_end":390173,"line_start":437,"line_end":437,"column_start":37,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":392757,"byte_end":392765,"line_start":73,"line_end":73,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":398812,"byte_end":398820,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":399326,"byte_end":399334,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":399744,"byte_end":399752,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":400204,"byte_end":400212,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":400660,"byte_end":400668,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":401106,"byte_end":401114,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":401830,"byte_end":401838,"line_start":326,"line_end":326,"column_start":6,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":404530,"byte_end":404538,"line_start":386,"line_end":386,"column_start":20,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":408921,"byte_end":408929,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1668},"to":{"krate":0,"index":1402}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":410786,"byte_end":410794,"line_start":567,"line_end":567,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1668},"to":{"krate":0,"index":1421}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":411834,"byte_end":411842,"line_start":607,"line_end":607,"column_start":29,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1548}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":411922,"byte_end":411930,"line_start":608,"line_end":608,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1538}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":412039,"byte_end":412047,"line_start":610,"line_end":610,"column_start":64,"column_end":72},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":412179,"byte_end":412187,"line_start":616,"line_end":616,"column_start":27,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2050}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":412260,"byte_end":412268,"line_start":618,"line_end":618,"column_start":65,"column_end":73},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2082}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413007,"byte_end":413015,"line_start":639,"line_end":639,"column_start":28,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2071}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413162,"byte_end":413170,"line_start":645,"line_end":645,"column_start":35,"column_end":43},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":7222}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413313,"byte_end":413321,"line_start":651,"line_end":651,"column_start":41,"column_end":49},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413557,"byte_end":413565,"line_start":660,"line_end":660,"column_start":41,"column_end":49},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413802,"byte_end":413810,"line_start":669,"line_end":669,"column_start":42,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":413999,"byte_end":414007,"line_start":678,"line_end":678,"column_start":35,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414181,"byte_end":414189,"line_start":684,"line_end":684,"column_start":37,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414382,"byte_end":414390,"line_start":693,"line_end":693,"column_start":23,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414616,"byte_end":414624,"line_start":702,"line_end":702,"column_start":23,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":414869,"byte_end":414877,"line_start":711,"line_end":711,"column_start":27,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":415529,"byte_end":415537,"line_start":731,"line_end":731,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\datetime.rs","byte_start":415736,"byte_end":415746,"line_start":738,"line_end":738,"column_start":43,"column_end":53},"kind":{"Impl":{"id":104}},"from":{"krate":1,"index":7504},"to":{"krate":2,"index":2227}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":485995,"byte_end":486010,"line_start":133,"line_end":133,"column_start":16,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2185}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486100,"byte_end":486115,"line_start":139,"line_end":139,"column_start":20,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486221,"byte_end":486236,"line_start":145,"line_end":145,"column_start":13,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":2050}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":486261,"byte_end":486276,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1044},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":493565,"byte_end":493575,"line_start":350,"line_end":350,"column_start":23,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1878},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":494324,"byte_end":494334,"line_start":365,"line_end":365,"column_start":16,"column_end":26},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1878},"to":{"krate":1,"index":1625}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":515242,"byte_end":515248,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1919},"to":{"krate":2,"index":2210}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parsed.rs","byte_start":515924,"byte_end":515930,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\parse.rs","byte_start":584773,"byte_end":584781,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1668},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":631125,"byte_end":631138,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\strftime.rs","byte_start":631457,"byte_end":631470,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1950},"to":{"krate":2,"index":3602}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":508594,"byte_end":508607,"line_start":697,"line_end":697,"column_start":62,"column_end":75},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":509457,"byte_end":509470,"line_start":719,"line_end":719,"column_start":79,"column_end":92},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1969},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\format\\mod.rs","byte_start":510359,"byte_end":510366,"line_start":751,"line_end":751,"column_start":18,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1996},"to":{"krate":2,"index":6758}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":647916,"byte_end":647917,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1369},"to":{"krate":0,"index":1365}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":649614,"byte_end":649619,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":1373}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":651298,"byte_end":651306,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1668},"to":{"krate":0,"index":1373}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":654768,"byte_end":654781,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1978},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\round.rs","byte_start":655360,"byte_end":655373,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1978},"to":{"krate":1,"index":1625}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":25221,"byte_end":25228,"line_start":619,"line_end":619,"column_start":6,"column_end":13},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":29219,"byte_end":29226,"line_start":729,"line_end":729,"column_start":23,"column_end":30},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1996},"to":{"krate":2,"index":7585}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":29874,"byte_end":29881,"line_start":746,"line_end":746,"column_start":36,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1996},"to":{"krate":17,"index":160}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":30820,"byte_end":30837,"line_start":784,"line_end":784,"column_start":21,"column_end":38},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2032},"to":{"krate":2,"index":7580}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":33844,"byte_end":33849,"line_start":896,"line_end":896,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":1402}},{"span":{"file_name":"C:\\Users\\Admin\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.13\\src\\lib.rs","byte_start":38080,"byte_end":38085,"line_start":1014,"line_end":1014,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":1421}}]}